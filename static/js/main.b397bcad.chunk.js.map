{"version":3,"sources":["components/Header.tsx","images/card-text.svg","components/CardItem.tsx","components/Column.tsx","data/defaultCards.ts","utils/api.ts","images/plus.svg","components/ToDoColumn.tsx","components/InProgressColumn.tsx","components/DoneColumn.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","className","CardItem","card","isInProgress","isDone","setPrice","onButtonClick","buttonVariant","buttonText","useState","cardLabel","setCardLabel","time","setTime","useStopwatch","seconds","minutes","hours","start","pause","useEffect","h","padStart","m","s","price","Card","style","minHeight","marginBottom","Body","src","icon","alt","Text","text","bsPrefix","Button","onClick","variant","Column","children","title","cards","cardsForAdd","setCards","setCardsForAdd","postCard","deleteCard","handleButtonClick","Promise","all","id","catch","updatedCards","filter","c","map","index","newCard","filterCards","length","setCurrentIndex","toFixed","Col","Badge","CardDeck","defaultProps","defaultCardsToDo","defaultCardsInProgress","defaultCardsDone","BASE_URL","headers","getCardsToDo","fetch","then","res","json","postCardInProgress","method","body","JSON","stringify","postCardDone","deleteCardToDo","deleteCardInProgress","ToDoColumn","isNewTaskClicked","setIsNewTaskClicked","newTask","setNewTask","api","plus","Form","onSubmit","evt","preventDefault","InputGroup","size","FormControl","placeholder","onChange","target","value","autoFocus","Append","type","InProgressColumn","DoneColumn","App","cardsToDo","setCardsToDo","cardsInProgress","setCardsInProgress","cardsDone","setCardsDone","Container","fluid","Row","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","querySelector"],"mappings":"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","file":"static/js/main.b397bcad.chunk.js","sourcesContent":["import React, { FC } from 'react';\nimport './Header.css';\n\nconst Header: FC = () => (\n  <header className=\"header\">\n    <h1 className=\"header__title\">Anyway Labs Test Project</h1>\n    <p className=\"header__text\">Just some good deeds</p>\n  </header>\n);\n\nexport default Header;\n","export default __webpack_public_path__ + \"static/media/card-text.a3406d9f.svg\";","import React, { FC, useState, useEffect } from 'react';\nimport { useStopwatch } from 'react-timer-hook';\nimport {\n  Card, Button,\n} from 'react-bootstrap';\nimport { ICardItem } from '../interfaces/ICardItem';\nimport { CardType } from '../types/CardType';\n\nimport './CardItem.css';\nimport icon from '../images/card-text.svg';\n\ninterface CardProps extends ICardItem {\n  card: CardType;\n  onButtonClick: (card: CardType) => void;\n}\n\nconst PRICE_PER_HOUR = 100;\n\nconst CardItem: FC<CardProps> = ({\n  card, isInProgress, isDone, setPrice, onButtonClick,\n}: CardProps) => {\n  const buttonVariant = isInProgress ? 'success' : 'primary';\n  const buttonText = isInProgress ? 'Resolve' : 'Start';\n\n  const [cardLabel, setCardLabel] = useState('');\n  const [time, setTime] = useState('');\n\n  const {\n    seconds, minutes, hours, start, pause,\n  } = useStopwatch();\n\n  useEffect(() => {\n    if (isInProgress) {\n      start();\n\n      const h = `${hours}`.padStart(2, '0');\n      const m = `${minutes}`.padStart(2, '0');\n      const s = `${seconds}`.padStart(2, '0');\n\n      setTime(`${h}:${m}:${s}`);\n      setCardLabel(time);\n      if (setPrice) setPrice((seconds / 60 / 60) * PRICE_PER_HOUR);\n    }\n\n    if (isDone) {\n      pause();\n      setCardLabel(`$${card.price || PRICE_PER_HOUR}`);\n    }\n  }, [isInProgress, hours, minutes, seconds, isDone, start, pause, setPrice, time, card.price]);\n\n  return (\n    <Card style={{ minHeight: 86, marginBottom: 10 }}>\n      <Card.Body className=\"card__body\">\n        <div className=\"card__main\">\n          <img className=\"card__img\" src={icon} alt=\"icon\" />\n          <div className=\"card__text-wrapper\">\n            <Card.Text>{card.text}</Card.Text>\n            <Card.Text bsPrefix=\"card-text text-muted\">{cardLabel}</Card.Text>\n          </div>\n        </div>\n\n        {!isDone && (\n          <Button onClick={() => onButtonClick(card)} variant={buttonVariant} className=\"card__button\">\n            {buttonText}\n          </Button>\n        )}\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default CardItem;\n","import React, { FC, ReactNode, useState } from 'react';\nimport {\n  Col, Badge, CardDeck,\n} from 'react-bootstrap';\nimport CardItem from './CardItem';\nimport { IColumn } from '../interfaces/IColumn';\nimport { CardType } from '../types/CardType';\nimport './Column.css';\n\ninterface ColumnProps extends IColumn {\n  children?: ReactNode;\n  cards: CardType[];\n  cardsForAdd?: CardType[];\n  setCards?: (cards: CardType[]) => void;\n  setCardsForAdd?: (cards: CardType[]) => void;\n  postCard?: (id: number) => void;\n  deleteCard?: (id: number) => void;\n}\n\nconst Column: FC<ColumnProps> = ({\n  children, title, cards, cardsForAdd, isInProgress, isDone,\n  setCards, setCardsForAdd, postCard, deleteCard,\n}: ColumnProps) => {\n  const [price, setPrice] = useState(0);\n\n  function filterCards(card: CardType) {\n    const newCards = cards.filter((c) => c.id !== card.id);\n    return newCards.map((c, index) => {\n      const newCard = c;\n      newCard.id = index;\n      return newCard;\n    });\n  }\n\n  function setCurrentIndex(card: CardType) {\n    const newCard = card;\n    if (cardsForAdd) newCard.id = cardsForAdd.length;\n    return newCard;\n  }\n\n  function handleButtonClick(card: CardType) {\n    if (postCard && deleteCard) {\n      Promise.all([postCard(card.id), deleteCard(card.id)])\n        /*\n          при наличии бэкенда код блока catch будет обрабатываться в then,\n          в ответ придет объект с данными удаленной карточки, этот объект будет передан\n          в вызываемые ниже функции аргументом, а не как сейчас браться из самого объекта карточки,\n          в самом же блоке catch будет обрабатываться ошибка\n        */\n        .catch(() => {\n          const updatedCards = filterCards(card);\n          if (setCards) setCards(updatedCards);\n\n          const newCard = setCurrentIndex(card);\n          if (isInProgress) newCard.price = +price.toFixed(2);\n          if (cardsForAdd && setCardsForAdd) setCardsForAdd([...cardsForAdd, newCard]);\n        });\n    }\n  }\n\n  return (\n    <Col className=\"column\">\n      <h2 className=\"column__title\">\n        <Badge className=\"column__badge\">\n          {cards.length}\n        </Badge>\n        {`${title}`}\n      </h2>\n      <CardDeck className=\"column__card-deck\">\n        {cards.map((card) => (\n          <CardItem\n            card={card}\n            key={card.id}\n            isInProgress={isInProgress || false}\n            isDone={isDone || false}\n            onButtonClick={handleButtonClick}\n            price={price}\n            setPrice={setPrice}\n          />\n        ))}\n        {children}\n      </CardDeck>\n    </Col>\n  );\n};\n\nColumn.defaultProps = {\n  cardsForAdd: [],\n  children: null,\n  setCards: () => {},\n  setCardsForAdd: () => {},\n  postCard: () => {},\n  deleteCard: () => {},\n};\n\nexport default Column;\n","export const defaultCardsToDo = [\n  { id: 0, text: 'Build a house' },\n  { id: 1, text: 'Plant a tree' },\n];\n\nexport const defaultCardsInProgress = [\n  { id: 0, text: 'Go to grocery' },\n];\n\nexport const defaultCardsDone = [\n  { id: 0, text: 'Take out the trash' },\n  { id: 1, text: 'Walk the dog' },\n];\n","export const BASE_URL = 'http://localhost:3000';\nexport const headers = {\n  'Content-Type': 'application/json; chaset=utf-8',\n};\n\nexport const getCardsToDo: () => Promise<Record<string, unknown>> = () => fetch(`${BASE_URL}/to-do`, {\n  headers,\n})\n  .then((res) => res.json());\n\nexport const getCardsInProgress: () => Promise<Record<string, unknown>> = () => fetch(`${BASE_URL}/in-progress`, {\n  headers,\n})\n  .then((res) => res.json());\n\nexport const getCardsDone: () => Promise<Record<string, unknown>> = () => fetch(`${BASE_URL}/done`, {\n  headers,\n})\n  .then((res) => res.json());\n\nexport const postCardToDo: (id: number) => Promise<Record<string, unknown>> = (id) => fetch(`${BASE_URL}/to-do`, {\n  method: 'POST',\n  headers,\n  body: JSON.stringify({\n    id,\n  }),\n})\n  .then((res) => res.json());\n\nexport const postCardInProgress: (id: number) => Promise<Record<string, unknown>> = (id) => fetch(`${BASE_URL}/in-progress`, {\n  method: 'POST',\n  headers,\n  body: JSON.stringify({\n    id,\n  }),\n})\n  .then((res) => res.json());\n\nexport const postCardDone: (id: number) => Promise<Record<string, unknown>> = (id) => fetch(`${BASE_URL}/done`, {\n  method: 'POST',\n  headers,\n  body: JSON.stringify({\n    id,\n  }),\n})\n  .then((res) => res.json());\n\nexport const deleteCardToDo: (id: number) => Promise<Record<string, unknown>> = (id) => fetch(`${BASE_URL}/to-do`, {\n  method: 'DELETE',\n  headers,\n  body: JSON.stringify({\n    id,\n  }),\n})\n  .then((res) => res.json());\n\nexport const deleteCardInProgress: (id: number) => Promise<Record<string, unknown>> = (id) => fetch(`${BASE_URL}/in-progress`, {\n  method: 'DELETE',\n  headers,\n  body: JSON.stringify({\n    id,\n  }),\n})\n  .then((res) => res.json());\n\nexport const deleteCardDone: (id: number) => Promise<Record<string, unknown>> = (id) => fetch(`${BASE_URL}/done`, {\n  method: 'DELETE',\n  headers,\n  body: JSON.stringify({\n    id,\n  }),\n})\n  .then((res) => res.json());\n","export default __webpack_public_path__ + \"static/media/plus.5e21677f.svg\";","import React, {\n  FC, SyntheticEvent, useState, useEffect,\n} from 'react';\nimport {\n  Button, InputGroup, Form, FormControl,\n} from 'react-bootstrap';\nimport Column from './Column';\nimport './Column.css';\nimport { CardType } from '../types/CardType';\nimport { defaultCardsToDo } from '../data/defaultCards';\nimport * as api from '../utils/api';\nimport plus from '../images/plus.svg';\n\nexport interface IToDo {\n  cards: CardType[];\n  cardsForAdd: CardType[];\n  setCards: (cards: CardType[]) => void;\n  setCardsForAdd: (cardsForAdd: CardType[]) => void;\n}\n\nconst ToDoColumn: FC<IToDo> = ({\n  cards, cardsForAdd, setCards, setCardsForAdd,\n}: IToDo) => {\n  const [isNewTaskClicked, setIsNewTaskClicked] = useState(false);\n  const [newTask, setNewTask] = useState('');\n\n  useEffect(() => {\n    api.getCardsToDo()\n    /*\n      при наличии бэкенда код блока catch будет обрабатываться в then,\n      в ответ придет объект с данными удаленной карточки, этот объект будет передан\n      в вызываемые ниже функции аргументом, а не как сейчас браться из самого объекта карточки,\n      в самом же блоке catch будет обрабатываться ошибка\n    */\n      .catch(() => setCards(defaultCardsToDo));\n  }, [setCards]);\n\n  function handleSubmit(evt: SyntheticEvent) {\n    evt.preventDefault();\n\n    if (newTask !== '') {\n      const newCard = {\n        id: cards.length,\n        text: newTask,\n      };\n\n      api.postCardToDo(newCard.id) // аналогично при любом вызове методов api\n        .catch(() => {\n          setCards([...cards, newCard]);\n          setIsNewTaskClicked(false);\n        });\n    }\n  }\n\n  return (\n    <Column\n      title=\"To do\"\n      cards={cards}\n      cardsForAdd={cardsForAdd}\n      setCards={setCards}\n      setCardsForAdd={setCardsForAdd}\n      postCard={api.postCardInProgress}\n      deleteCard={api.deleteCardToDo}\n    >\n      <Button\n        onClick={() => setIsNewTaskClicked(!isNewTaskClicked)}\n        variant=\"outline-dark\"\n        className=\"column__button\"\n      >\n        <img src={plus} alt=\"add\" className=\"column__button-img\" />\n        New task\n      </Button>\n\n      {isNewTaskClicked && (\n        <Form onSubmit={handleSubmit}>\n          <InputGroup size=\"sm\" className=\"column__input\">\n            <FormControl\n              placeholder=\"Do something...\"\n              onChange={(evt) => setNewTask(evt.target.value)}\n              autoFocus\n            />\n            <InputGroup.Append>\n              <Button className=\"column__input-button\" type=\"submit\" variant=\"outline-dark\">Add</Button>\n            </InputGroup.Append>\n          </InputGroup>\n        </Form>\n      )}\n    </Column>\n  );\n};\n\nexport default ToDoColumn;\n","import React, { FC, useEffect } from 'react';\nimport Column from './Column';\nimport { CardType } from '../types/CardType';\nimport * as api from '../utils/api';\nimport { defaultCardsInProgress } from '../data/defaultCards';\n\ninterface IInProgress {\n  cards: CardType[];\n  cardsForAdd: CardType[];\n  setCards: (cards: CardType[]) => void;\n  setCardsForAdd: (cardsForAdd: CardType[]) => void;\n}\n\nconst InProgressColumn: FC<IInProgress> = ({\n  cards, cardsForAdd, setCards, setCardsForAdd,\n}: IInProgress) => {\n  useEffect(() => {\n    /*\n      при наличии бэкенда код блока catch будет обрабатываться в then,\n      в ответ придет объект с данными удаленной карточки, этот объект будет передан\n      в вызываемые ниже функции аргументом, а не как сейчас браться из самого объекта карточки,\n      в самом же блоке catch будет обрабатываться ошибка\n    */\n    api.getCardsToDo()\n      .catch(() => setCards(defaultCardsInProgress));\n  }, [setCards]);\n\n  return (\n    <Column\n      title=\"In Progress\"\n      cards={cards}\n      cardsForAdd={cardsForAdd}\n      isInProgress\n      setCards={setCards}\n      setCardsForAdd={setCardsForAdd}\n      postCard={api.postCardDone}\n      deleteCard={api.deleteCardInProgress}\n    />\n  );\n};\nexport default InProgressColumn;\n","import React, { FC, useEffect } from 'react';\nimport Column from './Column';\nimport { CardType } from '../types/CardType';\nimport * as api from '../utils/api';\nimport { defaultCardsDone } from '../data/defaultCards';\n\ninterface IDone {\n  cards: CardType[];\n  setCards: (cards: CardType[]) => void;\n}\n\nconst DoneColumn: FC<IDone> = ({ cards, setCards }: IDone) => {\n  useEffect(() => {\n    /*\n      при наличии бэкенда код блока catch будет обрабатываться в then,\n      в ответ придет объект с данными удаленной карточки, этот объект будет передан\n      в вызываемые ниже функции аргументом, а не как сейчас браться из самого объекта карточки,\n      в самом же блоке catch будет обрабатываться ошибка\n    */\n    api.getCardsToDo()\n      .catch(() => setCards(defaultCardsDone));\n  }, [setCards]);\n\n  return (\n    <Column\n      title=\"Done\"\n      cards={cards}\n      isDone\n    />\n  );\n};\nexport default DoneColumn;\n","import React, { FC, useState } from 'react';\nimport { Container, Row } from 'react-bootstrap';\nimport Header from './components/Header';\nimport ToDoColumn from './components/ToDoColumn';\nimport InProgressColumn from './components/InProgressColumn';\nimport DoneColumn from './components/DoneColumn';\nimport { CardType } from './types/CardType';\nimport './App.css';\n\nconst App: FC = () => {\n  const [cardsToDo, setCardsToDo] = useState<CardType[]>([]);\n  const [cardsInProgress, setCardsInProgress] = useState<CardType[]>([]);\n  const [cardsDone, setCardsDone] = useState<CardType[]>([]);\n\n  return (\n    <>\n      <Header />\n      <Container fluid className=\"main\">\n        <Row className=\"main__wrapper\">\n          <ToDoColumn\n            cards={cardsToDo}\n            cardsForAdd={cardsInProgress}\n            setCards={setCardsToDo}\n            setCardsForAdd={setCardsInProgress}\n          />\n          <InProgressColumn\n            cards={cardsInProgress}\n            cardsForAdd={cardsDone}\n            setCards={setCardsInProgress}\n            setCardsForAdd={setCardsDone}\n          />\n          <DoneColumn\n            cards={cardsDone}\n            setCards={setCardsDone}\n          />\n        </Row>\n      </Container>\n    </>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals: () => void = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.querySelector('.root'),\n);\n\nreportWebVitals();\n"],"sourceRoot":""}