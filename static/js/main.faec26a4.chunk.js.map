{"version":3,"sources":["components/Header.tsx","images/card-text.svg","components/CardItem.tsx","components/Column.tsx","images/plus.svg","components/ToDoColumn.tsx","components/InProgressColumn.tsx","components/DoneColumn.tsx","utils/api.ts","data/defaultCards.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","className","CardItem","card","isInProgress","isDone","setPrice","onButtonClick","buttonVariant","buttonText","useState","cardLabel","setCardLabel","time","setTime","useStopwatch","seconds","minutes","hours","start","pause","useEffect","h","padStart","m","s","price","Card","style","minHeight","marginBottom","Body","src","icon","alt","Text","text","bsPrefix","Button","onClick","variant","Column","children","title","cards","cardsForAdd","setCards","setCardsForAdd","handleButtonClick","updatedCards","filter","c","id","map","index","newCard","filterCards","length","setCurrentIndex","toFixed","Col","Badge","CardDeck","defaultProps","ToDoColumn","isNewTaskClicked","setIsNewTaskClicked","newTask","setNewTask","plus","Form","onSubmit","evt","preventDefault","InputGroup","size","FormControl","placeholder","onChange","target","value","autoFocus","Append","type","InProgressColumn","DoneColumn","headers","defaultCardsToDo","defaultCardsInProgress","defaultCardsDone","App","cardsToDo","setCardsToDo","cardsInProgress","setCardsInProgress","cardsDone","setCardsDone","fetch","then","res","json","catch","Container","fluid","Row","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","querySelector"],"mappings":"uTAUeA,EAPI,kBACjB,yBAAQC,UAAU,SAAlB,UACE,oBAAIA,UAAU,gBAAd,sCACA,mBAAGA,UAAU,eAAb,sC,gFCNW,G,MAAA,IAA0B,uCCuE1BC,EArDiB,SAAC,GAEf,IADhBC,EACe,EADfA,KAAMC,EACS,EADTA,aAAcC,EACL,EADKA,OAAQC,EACb,EADaA,SAAUC,EACvB,EADuBA,cAEhCC,EAAgBJ,EAAe,UAAY,UAC3CK,EAAaL,EAAe,UAAY,QAF/B,EAImBM,mBAAS,IAJ5B,mBAIRC,EAJQ,KAIGC,EAJH,OAKSF,mBAAS,IALlB,mBAKRG,EALQ,KAKFC,EALE,OASXC,yBADFC,EARa,EAQbA,QAASC,EARI,EAQJA,QAASC,EARL,EAQKA,MAAOC,EARZ,EAQYA,MAAOC,EARnB,EAQmBA,MAsBlC,OAnBAC,qBAAU,WACR,GAAIjB,EAAc,CAChBe,IAEA,IAAMG,EAAI,UAAGJ,GAAQK,SAAS,EAAG,KAC3BC,EAAI,UAAGP,GAAUM,SAAS,EAAG,KAC7BE,EAAI,UAAGT,GAAUO,SAAS,EAAG,KAEnCT,EAAQ,GAAD,OAAIQ,EAAJ,YAASE,EAAT,YAAcC,IACrBb,EAAaC,GACTP,GAAUA,EAAUU,EAAU,GAAK,GAzBtB,KA4BfX,IACFe,IACAR,EAAa,IAAD,OAAKT,EAAKuB,OA9BL,SAgClB,CAACtB,EAAcc,EAAOD,EAASD,EAASX,EAAQc,EAAOC,EAAOd,EAAUO,EAAMV,EAAKuB,QAGpF,cAACC,EAAA,EAAD,CAAMC,MAAO,CAAEC,UAAW,GAAIC,aAAc,IAA5C,SACE,eAACH,EAAA,EAAKI,KAAN,CAAW9B,UAAU,aAArB,UACE,sBAAKA,UAAU,aAAf,UACE,qBAAKA,UAAU,YAAY+B,IAAKC,EAAMC,IAAI,SAC1C,sBAAKjC,UAAU,qBAAf,UACE,cAAC0B,EAAA,EAAKQ,KAAN,UAAYhC,EAAKiC,OACjB,cAACT,EAAA,EAAKQ,KAAN,CAAWE,SAAS,uBAApB,SAA4C1B,WAI9CN,GACA,cAACiC,EAAA,EAAD,CAAQC,QAAS,kBAAMhC,EAAcJ,IAAOqC,QAAShC,EAAeP,UAAU,eAA9E,SACGQ,UC9CPgC,G,MAA0B,SAAC,GAGb,IAFlBC,EAEiB,EAFjBA,SAAUC,EAEO,EAFPA,MAAOC,EAEA,EAFAA,MAAOC,EAEP,EAFOA,YAAazC,EAEpB,EAFoBA,aAAcC,EAElC,EAFkCA,OACnDyC,EACiB,EADjBA,SAAUC,EACO,EADPA,eACO,EACSrC,mBAAS,GADlB,mBACVgB,EADU,KACHpB,EADG,KAkBjB,SAAS0C,EAAkB7C,GACzB,IAAM8C,EAhBR,SAAqB9C,GAEnB,OADiByC,EAAMM,QAAO,SAACC,GAAD,OAAOA,EAAEC,KAAOjD,EAAKiD,MACnCC,KAAI,SAACF,EAAGG,GACtB,IAAMC,EAAUJ,EAEhB,OADAI,EAAQH,GAAKE,EACNC,KAWYC,CAAYrD,GAC7B2C,GAAUA,EAASG,GAEvB,IAAMM,EAVR,SAAyBpD,GACvB,IAAMoD,EAAUpD,EAEhB,OADI0C,IAAaU,EAAQH,GAAKP,EAAYY,QACnCF,EAOSG,CAAgBvD,GAC5BC,IAAcmD,EAAQ7B,OAASA,EAAMiC,QAAQ,IAC7Cd,GAAeE,GAAgBA,EAAe,GAAD,mBAAKF,GAAL,CAAkBU,KAGrE,OACE,eAACK,EAAA,EAAD,CAAK3D,UAAU,SAAf,UACE,qBAAIA,UAAU,gBAAd,UACE,cAAC4D,EAAA,EAAD,CAAO5D,UAAU,gBAAjB,SACG2C,EAAMa,SAFX,UAIMd,MAEN,eAACmB,EAAA,EAAD,CAAU7D,UAAU,oBAApB,UACG2C,EAAMS,KAAI,SAAClD,GAAD,OACT,cAAC,EAAD,CACEA,KAAMA,EAENC,aAAcA,IAAgB,EAC9BC,OAAQA,IAAU,EAClBE,cAAeyC,EACftB,MAAOA,EACPpB,SAAUA,GALLH,EAAKiD,OAQbV,UAMTD,EAAOsB,aAAe,CACpBlB,YAAa,GACbH,SAAU,KACVI,SAAU,aACVC,eAAgB,cAGHN,QChFA,MAA0B,iCCwE1BuB,EAvDe,SAAC,GAEjB,IADZpB,EACW,EADXA,MAAOC,EACI,EADJA,YAAaC,EACT,EADSA,SAAUC,EACnB,EADmBA,eACnB,EACqCrC,oBAAS,GAD9C,mBACJuD,EADI,KACcC,EADd,OAEmBxD,mBAAS,IAF5B,mBAEJyD,EAFI,KAEKC,EAFL,KAkBX,OACE,eAAC,EAAD,CACEzB,MAAM,QACNC,MAAOA,EACPC,YAAaA,EACbC,SAAUA,EACVC,eAAgBA,EALlB,UAOE,eAACT,EAAA,EAAD,CACEC,QAAS,kBAAM2B,GAAqBD,IACpCzB,QAAQ,eACRvC,UAAU,iBAHZ,UAKE,qBAAK+B,IAAKqC,EAAMnC,IAAI,MAAMjC,UAAU,uBALtC,cASCgE,GACC,cAACK,EAAA,EAAD,CAAMC,SAhCZ,SAAsBC,GAGpB,GAFAA,EAAIC,iBAEY,KAAZN,EAAgB,CAClB,IAAMZ,EAAU,CACdH,GAAIR,EAAMa,OACVrB,KAAM+B,GAGRrB,EAAS,GAAD,mBAAKF,GAAL,CAAYW,KACpBW,GAAoB,KAsBlB,SACE,eAACQ,EAAA,EAAD,CAAYC,KAAK,KAAK1E,UAAU,gBAAhC,UACE,cAAC2E,EAAA,EAAD,CACEC,YAAY,kBACZC,SAAU,SAACN,GAAD,OAASJ,EAAWI,EAAIO,OAAOC,QACzCC,WAAS,IAEX,cAACP,EAAA,EAAWQ,OAAZ,UACE,cAAC5C,EAAA,EAAD,CAAQrC,UAAU,uBAAuBkF,KAAK,SAAS3C,QAAQ,eAA/D,4BCvCC4C,EAb2B,SAAC,GAAD,IACxCxC,EADwC,EACxCA,MAAOC,EADiC,EACjCA,YAAaC,EADoB,EACpBA,SAAUC,EADU,EACVA,eADU,OAGxC,cAAC,EAAD,CACEJ,MAAM,cACNC,MAAOA,EACPC,YAAaA,EACbzC,cAAY,EACZ0C,SAAUA,EACVC,eAAgBA,KCJLsC,EARe,SAAC,GAAD,IAAGzC,EAAH,EAAGA,MAAH,OAC5B,cAAC,EAAD,CACED,MAAM,OACNC,MAAOA,EACPvC,QAAM,KCZGiF,G,MAAU,CACrB,eAAgB,mCCDLC,EAAmB,CAC9B,CAAEnC,GAAI,EAAGhB,KAAM,iBACf,CAAEgB,GAAI,EAAGhB,KAAM,iBAGJoD,EAAyB,CACpC,CAAEpC,GAAI,EAAGhB,KAAM,kBAGJqD,EAAmB,CAC9B,CAAErC,GAAI,EAAGhB,KAAM,sBACf,CAAEgB,GAAI,EAAGhB,KAAM,iBC4CFsD,EA3CC,WAAO,IAAD,EACchF,mBAAqB,IADnC,mBACbiF,EADa,KACFC,EADE,OAE0BlF,mBAAqB,IAF/C,mBAEbmF,EAFa,KAEIC,EAFJ,OAGcpF,mBAAqB,IAHnC,mBAGbqF,EAHa,KAGFC,EAHE,KAmBpB,OAdA3E,qBAAU,WFb8D4E,MAAM,8BAA+B,CAC7GX,YAECY,MAAK,SAACC,GAAD,OAASA,EAAIC,UEYdF,MAAK,kBAAMN,EAAaL,MACxBc,OAAM,kBAAMT,EAAaL,MFXgDU,MAAM,oCAAqC,CACzHX,YAECY,MAAK,SAACC,GAAD,OAASA,EAAIC,UEWdF,MAAK,kBAAMJ,EAAmBN,MAC9Ba,OAAM,kBAAMP,EAAmBN,MFVoCS,MAAM,6BAA8B,CAC5GX,YAECY,MAAK,SAACC,GAAD,OAASA,EAAIC,UEUdF,MAAK,kBAAMF,EAAaP,MACxBY,OAAM,kBAAML,EAAaP,QAC3B,IAGD,qCACE,cAAC,EAAD,IACA,cAACa,EAAA,EAAD,CAAWC,OAAK,EAACtG,UAAU,OAA3B,SACE,eAACuG,EAAA,EAAD,CAAKvG,UAAU,gBAAf,UACE,cAAC,EAAD,CACE2C,MAAO+C,EACP9C,YAAagD,EACb/C,SAAU8C,EACV7C,eAAgB+C,IAElB,cAAC,EAAD,CACElD,MAAOiD,EACPhD,YAAakD,EACbjD,SAAUgD,EACV/C,eAAgBiD,IAElB,cAAC,EAAD,CAAYpD,MAAOmD,aChCdU,EAdqB,SAACC,GAC/BA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAEnB,IADLU,EACI,EADJA,OAAQC,EACJ,EADIA,OAAQC,EACZ,EADYA,OAAQC,EACpB,EADoBA,OAAQC,EAC5B,EAD4BA,QAEhCJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCJdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,cAAc,UAGzBZ,M","file":"static/js/main.faec26a4.chunk.js","sourcesContent":["import React, { FC } from 'react';\nimport './Header.css';\n\nconst Header: FC = () => (\n  <header className=\"header\">\n    <h1 className=\"header__title\">Anyway Labs Test Project</h1>\n    <p className=\"header__text\">Just some good deeds</p>\n  </header>\n);\n\nexport default Header;\n","export default __webpack_public_path__ + \"static/media/card-text.a3406d9f.svg\";","import React, { FC, useState, useEffect } from 'react';\nimport { useStopwatch } from 'react-timer-hook';\nimport {\n  Card, Button,\n} from 'react-bootstrap';\nimport { ICardItem } from '../interfaces/ICardItem';\nimport { CardType } from '../types/CardType';\n\nimport './CardItem.css';\nimport icon from '../images/card-text.svg';\n\ninterface CardProps extends ICardItem {\n  card: CardType;\n  onButtonClick: (card: CardType) => void;\n}\n\nconst PRICE_PER_HOUR = 100;\n\nconst CardItem: FC<CardProps> = ({\n  card, isInProgress, isDone, setPrice, onButtonClick,\n}: CardProps) => {\n  const buttonVariant = isInProgress ? 'success' : 'primary';\n  const buttonText = isInProgress ? 'Resolve' : 'Start';\n\n  const [cardLabel, setCardLabel] = useState('');\n  const [time, setTime] = useState('');\n\n  const {\n    seconds, minutes, hours, start, pause,\n  } = useStopwatch();\n\n  useEffect(() => {\n    if (isInProgress) {\n      start();\n\n      const h = `${hours}`.padStart(2, '0');\n      const m = `${minutes}`.padStart(2, '0');\n      const s = `${seconds}`.padStart(2, '0');\n\n      setTime(`${h}:${m}:${s}`);\n      setCardLabel(time);\n      if (setPrice) setPrice((seconds / 60 / 60) * PRICE_PER_HOUR);\n    }\n\n    if (isDone) {\n      pause();\n      setCardLabel(`$${card.price || PRICE_PER_HOUR}`);\n    }\n  }, [isInProgress, hours, minutes, seconds, isDone, start, pause, setPrice, time, card.price]);\n\n  return (\n    <Card style={{ minHeight: 86, marginBottom: 10 }}>\n      <Card.Body className=\"card__body\">\n        <div className=\"card__main\">\n          <img className=\"card__img\" src={icon} alt=\"icon\" />\n          <div className=\"card__text-wrapper\">\n            <Card.Text>{card.text}</Card.Text>\n            <Card.Text bsPrefix=\"card-text text-muted\">{cardLabel}</Card.Text>\n          </div>\n        </div>\n\n        {!isDone && (\n          <Button onClick={() => onButtonClick(card)} variant={buttonVariant} className=\"card__button\">\n            {buttonText}\n          </Button>\n        )}\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default CardItem;\n","import React, { FC, ReactNode, useState } from 'react';\nimport {\n  Col, Badge, CardDeck,\n} from 'react-bootstrap';\nimport CardItem from './CardItem';\nimport { IColumn } from '../interfaces/IColumn';\nimport { CardType } from '../types/CardType';\nimport './Column.css';\n\ninterface ColumnProps extends IColumn {\n  children?: ReactNode;\n  cards: CardType[];\n  cardsForAdd?: CardType[];\n  setCards?: (cards: CardType[]) => void;\n  setCardsForAdd?: (cards: CardType[]) => void;\n}\n\nconst Column: FC<ColumnProps> = ({\n  children, title, cards, cardsForAdd, isInProgress, isDone,\n  setCards, setCardsForAdd,\n}: ColumnProps) => {\n  const [price, setPrice] = useState(0);\n\n  function filterCards(card: CardType) {\n    const newCards = cards.filter((c) => c.id !== card.id);\n    return newCards.map((c, index) => {\n      const newCard = c;\n      newCard.id = index;\n      return newCard;\n    });\n  }\n\n  function setCurrentIndex(card: CardType) {\n    const newCard = card;\n    if (cardsForAdd) newCard.id = cardsForAdd.length;\n    return newCard;\n  }\n\n  function handleButtonClick(card: CardType) {\n    const updatedCards = filterCards(card);\n    if (setCards) setCards(updatedCards);\n\n    const newCard = setCurrentIndex(card);\n    if (isInProgress) newCard.price = +price.toFixed(2);\n    if (cardsForAdd && setCardsForAdd) setCardsForAdd([...cardsForAdd, newCard]);\n  }\n\n  return (\n    <Col className=\"column\">\n      <h2 className=\"column__title\">\n        <Badge className=\"column__badge\">\n          {cards.length}\n        </Badge>\n        {`${title}`}\n      </h2>\n      <CardDeck className=\"column__card-deck\">\n        {cards.map((card) => (\n          <CardItem\n            card={card}\n            key={card.id}\n            isInProgress={isInProgress || false}\n            isDone={isDone || false}\n            onButtonClick={handleButtonClick}\n            price={price}\n            setPrice={setPrice}\n          />\n        ))}\n        {children}\n      </CardDeck>\n    </Col>\n  );\n};\n\nColumn.defaultProps = {\n  cardsForAdd: [],\n  children: null,\n  setCards: () => {},\n  setCardsForAdd: () => {},\n};\n\nexport default Column;\n","export default __webpack_public_path__ + \"static/media/plus.5e21677f.svg\";","import React, { FC, SyntheticEvent, useState } from 'react';\nimport {\n  Button, InputGroup, Form, FormControl,\n} from 'react-bootstrap';\nimport Column from './Column';\nimport { CardType } from '../types/CardType';\n\nimport './Column.css';\nimport plus from '../images/plus.svg';\n\nexport interface IToDo {\n  cards: CardType[];\n  cardsForAdd: CardType[];\n  setCards: (cards: CardType[]) => void;\n  setCardsForAdd: (cardsForAdd: CardType[]) => void;\n}\n\nconst ToDoColumn: FC<IToDo> = ({\n  cards, cardsForAdd, setCards, setCardsForAdd,\n}: IToDo) => {\n  const [isNewTaskClicked, setIsNewTaskClicked] = useState(false);\n  const [newTask, setNewTask] = useState('');\n\n  function handleSubmit(evt: SyntheticEvent) {\n    evt.preventDefault();\n\n    if (newTask !== '') {\n      const newCard = {\n        id: cards.length,\n        text: newTask,\n      };\n\n      setCards([...cards, newCard]);\n      setIsNewTaskClicked(false);\n    }\n  }\n\n  return (\n    <Column\n      title=\"To do\"\n      cards={cards}\n      cardsForAdd={cardsForAdd}\n      setCards={setCards}\n      setCardsForAdd={setCardsForAdd}\n    >\n      <Button\n        onClick={() => setIsNewTaskClicked(!isNewTaskClicked)}\n        variant=\"outline-dark\"\n        className=\"column__button\"\n      >\n        <img src={plus} alt=\"add\" className=\"column__button-img\" />\n        New task\n      </Button>\n\n      {isNewTaskClicked && (\n        <Form onSubmit={handleSubmit}>\n          <InputGroup size=\"sm\" className=\"column__input\">\n            <FormControl\n              placeholder=\"Do something...\"\n              onChange={(evt) => setNewTask(evt.target.value)}\n              autoFocus\n            />\n            <InputGroup.Append>\n              <Button className=\"column__input-button\" type=\"submit\" variant=\"outline-dark\">Add</Button>\n            </InputGroup.Append>\n          </InputGroup>\n        </Form>\n      )}\n    </Column>\n  );\n};\n\nexport default ToDoColumn;\n","import React, { FC } from 'react';\nimport Column from './Column';\nimport { CardType } from '../types/CardType';\n\ninterface IInProgress {\n  cards: CardType[];\n  cardsForAdd: CardType[];\n  setCards: (cards: CardType[]) => void;\n  setCardsForAdd: (cardsForAdd: CardType[]) => void;\n}\n\nconst InProgressColumn: FC<IInProgress> = ({\n  cards, cardsForAdd, setCards, setCardsForAdd,\n}: IInProgress) => (\n  <Column\n    title=\"In Progress\"\n    cards={cards}\n    cardsForAdd={cardsForAdd}\n    isInProgress\n    setCards={setCards}\n    setCardsForAdd={setCardsForAdd}\n  />\n);\n\nexport default InProgressColumn;\n","import React, { FC } from 'react';\nimport Column from './Column';\nimport { CardType } from '../types/CardType';\n\ninterface IDone {\n  cards: CardType[];\n}\n\nconst DoneColumn: FC<IDone> = ({ cards }: IDone) => (\n  <Column\n    title=\"Done\"\n    cards={cards}\n    isDone\n  />\n);\n\nexport default DoneColumn;\n","export const headers = {\n  'Content-Type': 'application/json; chaset=utf-8',\n};\n\nexport const getCardsToDo: () => Promise<Record<string, unknown>> = () => fetch('http://localhost:3000/to-do', {\n  headers,\n})\n  .then((res) => res.json());\n\nexport const getCardsInProgress: () => Promise<Record<string, unknown>> = () => fetch('http://localhost:3000/in-progress', {\n  headers,\n})\n  .then((res) => res.json());\n\nexport const getCardsDone: () => Promise<Record<string, unknown>> = () => fetch('http://localhost:3000/done', {\n  headers,\n})\n  .then((res) => res.json());\n","export const defaultCardsToDo = [\n  { id: 0, text: 'Build a house' },\n  { id: 1, text: 'Plant a tree' },\n];\n\nexport const defaultCardsInProgress = [\n  { id: 0, text: 'Go to grocery' },\n];\n\nexport const defaultCardsDone = [\n  { id: 0, text: 'Take out the trash' },\n  { id: 1, text: 'Walk the dog' },\n];\n","import React, { FC, useState, useEffect } from 'react';\nimport { Container, Row } from 'react-bootstrap';\nimport Header from './components/Header';\nimport ToDoColumn from './components/ToDoColumn';\nimport InProgressColumn from './components/InProgressColumn';\nimport DoneColumn from './components/DoneColumn';\nimport { CardType } from './types/CardType';\nimport './App.css';\n\nimport * as api from './utils/api';\nimport { defaultCardsToDo, defaultCardsInProgress, defaultCardsDone } from './data/defaultCards';\n\nconst App: FC = () => {\n  const [cardsToDo, setCardsToDo] = useState<CardType[]>([]);\n  const [cardsInProgress, setCardsInProgress] = useState<CardType[]>([]);\n  const [cardsDone, setCardsDone] = useState<CardType[]>([]);\n\n  useEffect(() => {\n    api.getCardsToDo()\n      .then(() => setCardsToDo(defaultCardsToDo))\n      .catch(() => setCardsToDo(defaultCardsToDo));\n\n    api.getCardsInProgress()\n      .then(() => setCardsInProgress(defaultCardsInProgress))\n      .catch(() => setCardsInProgress(defaultCardsInProgress));\n\n    api.getCardsDone()\n      .then(() => setCardsDone(defaultCardsDone))\n      .catch(() => setCardsDone(defaultCardsDone));\n  }, []);\n\n  return (\n    <>\n      <Header />\n      <Container fluid className=\"main\">\n        <Row className=\"main__wrapper\">\n          <ToDoColumn\n            cards={cardsToDo}\n            cardsForAdd={cardsInProgress}\n            setCards={setCardsToDo}\n            setCardsForAdd={setCardsInProgress}\n          />\n          <InProgressColumn\n            cards={cardsInProgress}\n            cardsForAdd={cardsDone}\n            setCards={setCardsInProgress}\n            setCardsForAdd={setCardsDone}\n          />\n          <DoneColumn cards={cardsDone} />\n        </Row>\n      </Container>\n    </>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals: () => void = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.querySelector('.root'),\n);\n\nreportWebVitals();\n"],"sourceRoot":""}